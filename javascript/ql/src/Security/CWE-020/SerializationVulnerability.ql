/**
 * @kind path-problem
 */

import javascript

predicate replaceOne(DataFlow::SourceNode input, DataFlow::Node output, string old, string new) {
  exists(DataFlow::ObjectLiteralNode map |
    map.hasPropertyWrite(old, any(DataFlow::Node esc | esc.getStringValue() = new)) and
    map.getAPropertyRead().flowsTo(output) and
    input.flowsToExpr(output.(DataFlow::PropRead).getPropertyNameExpr())
  )
  or
  exists(EqualityTest eq, ConditionGuardNode cond |
    eq.hasOperands(any(Expr e | input.flowsToExpr(e)), any(Expr e | e.getStringValue() = old)) and
    cond.getTest() = eq and
    cond.getOutcome() = eq.getPolarity() and
    cond.dominates(output.getBasicBlock()) and
    new = output.getStringValue()
  )
}

predicate replaceAll(DataFlow::SourceNode input, DataFlow::Node output, string old, string new) {
  exists(Variable idx, DataFlow::CallNode char, Variable buf, AssignAddExpr cat, VarAccess res |
    char = input.getAMethodCall("charAt") and
    char.getArgument(0).asExpr() = idx.getAnAccess() and
    exists(RelationalComparison cmp |
      cmp.getLesserOperand() = idx.getAnAccess() and
      input.getAPropertyRead("length").flowsToExpr(cmp.getGreaterOperand())
    ) and
    replaceOne(char, cat.getRhs().flow(), old, new) and
    cat.getLhs() = buf.getAnAccess() and
    res = buf.getAnAccess() and
    not res.isLValue() and
    output = res.flow()
  )
  or
  exists(StringReplaceCall repl |
    repl.isGlobal() and
    input = repl.getReceiver().getALocalSource() and
    repl.flowsTo(output) and
    repl.replaces(old, new)
  )
  or
  exists(DataFlow::InvokeNode invk, DataFlow::FunctionNode callee, int i |
    callee.getFunction() = invk.getACallee() and
    input.flowsTo(invk.getArgument(i)) and
    replaceAll(callee.getParameter(i), callee.getAReturn(), old, new) and
    invk.flowsTo(output)
  )
}

predicate flowStep(DataFlow::Node pred, DataFlow::Node succ) {
  TaintTracking::localTaintStep(pred, succ)
  or
  exists(ForInStmt fis, SsaExplicitDefinition ssa |
    pred = fis.getIterationDomain().flow() and
    ssa.getDef() = fis.getIteratorExpr() and
    succ = DataFlow::ssaDefinitionNode(ssa)
  )
}

query predicate edges(DataFlow::Node pred, DataFlow::Node succ) {
  flowStep(pred, succ) and
  not succ.(DataFlow::MethodCallNode).getMethodName() = "replace" and
  not succ.(DataFlow::PropRead).getPropertyName() = "flags" and
  not any(TaintTracking::AdditionalSanitizerGuardNode guard).internalBlocks(succ, "")
}

predicate sanitizer(DataFlow::FunctionNode f, DataFlow::ParameterNode parm) {
  parm = f.getAParameter() and
  exists(DataFlow::Node out |
    replaceAll(parm, out, "<", "\\u003C") and
    TaintTracking::localTaintStep*(out, f.getAReturn())
  )
}

from DataFlow::FunctionNode f, DataFlow::ParameterNode parm, DataFlow::Node return
where
  sanitizer(f, parm) and
  edges*(parm, return) and
  return = f.getAReturn()
select parm, parm, return, "Inconsistent sanitization."
